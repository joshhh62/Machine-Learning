{"cells":[{"cell_type":"markdown","id":"20dc80e4","metadata":{"id":"20dc80e4"},"source":["# üßë‚Äçüíª NumPy Complete Guided Project\n","**Instructor / Student Colab Notebook** ‚Äì covers *all* key concepts from `Numpy‚Äë1` to `Numpy‚Äë5`.\n","\n","*Generated: 08¬†Aug¬†2025*"]},{"cell_type":"markdown","id":"e8b8b6cf","metadata":{"id":"e8b8b6cf"},"source":["\n","**Table of Contents**\n","\n","1. [Setup](#setup)  \n","2. [Array Creation & Dtypes](#creation)  \n","3. [Array Attributes & Inspection](#attributes)  \n","4. [Indexing, Slicing, Fancy Indexing](#indexing)  \n","5. [Reshaping, Transpose & Copies vs‚ÄØViews](#reshape)  \n","6. [Joining, Splitting, Set & Sorting Ops](#join)  \n","7. [Arithmetic Ops, Universal Functions](#arithmetic)  \n","8. [Broadcasting (Rules¬†+ Examples)](#broadcast)  \n","9. [Statistics & Aggregations](#stats)  \n","10. [Random Numbers & Reproducibility](#random)  \n","11. [Structured¬†/ Recarrays](#structured)  \n","12. [Linear Algebra Essentials](#linalg)  \n","13. [File¬†I/O (`npy`, `npz`, `txt`)](#io)  \n","14. [Datetime64 & Timedelta64](#datetime)  \n","15. [Masked Arrays & NaNs](#mask)  \n","16. [Mini‚ÄëProject¬†‚Äî Fitness Data Analysis](#project)  \n","17. [Conclusion & Next Steps](#conclusion)  \n"]},{"cell_type":"markdown","id":"9170f3ee","metadata":{"id":"9170f3ee"},"source":["## <a name='setup'></a>1Ô∏è‚É£ Setup"]},{"cell_type":"code","execution_count":4,"id":"4f54988f","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4f54988f","executionInfo":{"status":"ok","timestamp":1754675838906,"user_tz":-330,"elapsed":33,"user":{"displayName":"joshith sai panchumarthi | AP23110010163","userId":"11800902132864092383"}},"outputId":"21cef687-9ff0-4d92-a9ae-582a9a26138f"},"outputs":[{"output_type":"stream","name":"stdout","text":["NumPy version: 2.0.2\n"]}],"source":["import numpy as np, math, os, pathlib, types, textwrap, random\n","print('NumPy version:', np.__version__)"]},{"cell_type":"markdown","id":"c7f7b2c8","metadata":{"id":"c7f7b2c8"},"source":["## <a name='creation'></a>2Ô∏è‚É£ Array Creation & Dtypes"]},{"cell_type":"markdown","id":"47405152","metadata":{"id":"47405152"},"source":["Key functions: `np.array`, `np.arange`, `np.linspace`, `zeros`, `ones`, `full`, `eye`, `identity`, `diag`, `empty`"]},{"cell_type":"code","execution_count":2,"id":"801e99ad","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"801e99ad","executionInfo":{"status":"ok","timestamp":1754675633014,"user_tz":-330,"elapsed":65,"user":{"displayName":"joshith sai panchumarthi | AP23110010163","userId":"11800902132864092383"}},"outputId":"86a16cc3-f074-4a4e-c3cb-fb6d8d786533"},"outputs":[{"output_type":"stream","name":"stdout","text":["[1 2 3]\n","[0.  0.2 0.4 0.6 0.8 1. ]\n","[[7.5 7.5 7.5]\n"," [7.5 7.5 7.5]]\n","dtypes: int32 float64\n"]}],"source":["# EXAMPLE\n","arr1 = np.array([1, 2, 3], dtype=np.int32)\n","arr2 = np.linspace(0, 1, 6)\n","arr3 = np.full((2,3), 7.5)\n","print(arr1, arr2, arr3, sep=\"\\n\")\n","print(\"dtypes:\", arr1.dtype, arr2.dtype)\n"]},{"cell_type":"code","execution_count":5,"id":"dc63d076","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dc63d076","executionInfo":{"status":"ok","timestamp":1754675859293,"user_tz":-330,"elapsed":17,"user":{"displayName":"joshith sai panchumarthi | AP23110010163","userId":"11800902132864092383"}},"outputId":"da1d76cb-e9f4-43bc-c791-f8d6c38c6f88"},"outputs":[{"output_type":"stream","name":"stdout","text":["[[0 1 0 1 0 1 0 1 0 1]\n"," [1 0 1 0 1 0 1 0 1 0]\n"," [0 1 0 1 0 1 0 1 0 1]\n"," [1 0 1 0 1 0 1 0 1 0]\n"," [0 1 0 1 0 1 0 1 0 1]\n"," [1 0 1 0 1 0 1 0 1 0]\n"," [0 1 0 1 0 1 0 1 0 1]\n"," [1 0 1 0 1 0 1 0 1 0]\n"," [0 1 0 1 0 1 0 1 0 1]\n"," [1 0 1 0 1 0 1 0 1 0]]\n"]}],"source":["# üñäÔ∏è¬†TODO: create a 10√ó10 chessboard pattern using zeros & ones\n","import numpy as np\n","\n","chessboard = np.zeros((10, 10), dtype=int)\n","chessboard[1::2, ::2] = 1\n","chessboard[::2, 1::2] = 1\n","\n","print(chessboard)\n"]},{"cell_type":"markdown","id":"925be762","metadata":{"id":"925be762"},"source":["## <a name='attributes'></a>3Ô∏è‚É£ Array Attributes & Inspection"]},{"cell_type":"markdown","id":"f103bb36","metadata":{"id":"f103bb36"},"source":["`shape`, `ndim`, `size`, `dtype`, `itemsize`, `nbytes`"]},{"cell_type":"code","execution_count":6,"id":"ad3eeda1","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ad3eeda1","executionInfo":{"status":"ok","timestamp":1754675879603,"user_tz":-330,"elapsed":69,"user":{"displayName":"joshith sai panchumarthi | AP23110010163","userId":"11800902132864092383"}},"outputId":"77b49905-731d-41d7-e640-5e5245bc84f3"},"outputs":[{"output_type":"stream","name":"stdout","text":["shape (3, 4) ndim 2 size 12 itemsize 8 total bytes 96\n"]}],"source":["M = np.arange(12).reshape(3,4)\n","print('shape', M.shape, 'ndim', M.ndim, 'size', M.size, 'itemsize', M.itemsize, 'total bytes', M.nbytes)\n"]},{"cell_type":"code","execution_count":7,"id":"5875fefe","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5875fefe","executionInfo":{"status":"ok","timestamp":1754675900233,"user_tz":-330,"elapsed":18,"user":{"displayName":"joshith sai panchumarthi | AP23110010163","userId":"11800902132864092383"}},"outputId":"03c611c4-3e1d-45eb-d7f5-9e442922a4a5"},"outputs":[{"output_type":"stream","name":"stdout","text":["8000000 bytes\n"]}],"source":["# üñäÔ∏è TODO: check memory footprint of a 1000√ó1000 float64 array\n","import numpy as np\n","\n","arr = np.zeros((1000, 1000), dtype=np.float64)\n","print(arr.nbytes, \"bytes\")\n"]},{"cell_type":"markdown","id":"bd895660","metadata":{"id":"bd895660"},"source":["## <a name='indexing'></a>4Ô∏è‚É£ Indexing, Slicing & Fancy Indexing"]},{"cell_type":"code","execution_count":8,"id":"5dc7d4c1","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5dc7d4c1","executionInfo":{"status":"ok","timestamp":1754675931326,"user_tz":-330,"elapsed":80,"user":{"displayName":"joshith sai panchumarthi | AP23110010163","userId":"11800902132864092383"}},"outputId":"400fcdba-b9a3-4cdf-fbda-f2d46c64eced"},"outputs":[{"output_type":"stream","name":"stdout","text":["[ 1  6 11 16 21]\n","[[ 1  3  5]\n"," [11 13 15]\n"," [21 23 25]]\n","multiples of 3: [ 3  6  9 12 15 18 21 24]\n"]}],"source":["a = np.arange(1,26).reshape(5,5)\n","print(a[:, 0])     # first column\n","print(a[::2, ::2]) # every 2nd row/col\n","mask = (a % 3 == 0)\n","print('multiples of 3:', a[mask])\n"]},{"cell_type":"code","execution_count":9,"id":"9c4bd5f4","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9c4bd5f4","executionInfo":{"status":"ok","timestamp":1754675944946,"user_tz":-330,"elapsed":26,"user":{"displayName":"joshith sai panchumarthi | AP23110010163","userId":"11800902132864092383"}},"outputId":"0d890925-7d35-4710-afd7-c61606ba1e14"},"outputs":[{"output_type":"stream","name":"stdout","text":["[[10 11 12]\n"," [ 4  5  6]\n"," [ 7  8  9]\n"," [ 1  2  3]]\n"]}],"source":["# üñäÔ∏è TODO: use fancy indexing to swap first and last rows of `a`\n","import numpy as np\n","\n","a = np.arange(1, 13).reshape(4, 3)\n","a[[0, -1]] = a[[-1, 0]]\n","print(a)\n"]},{"cell_type":"markdown","id":"8f4de1d5","metadata":{"id":"8f4de1d5"},"source":["## <a name='reshape'></a>5Ô∏è‚É£ Reshaping, Transpose & Copies vs‚ÄØViews"]},{"cell_type":"code","execution_count":10,"id":"053b4ff4","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"053b4ff4","executionInfo":{"status":"ok","timestamp":1754675949148,"user_tz":-330,"elapsed":12,"user":{"displayName":"joshith sai panchumarthi | AP23110010163","userId":"11800902132864092383"}},"outputId":"50fe03e8-8da2-45fe-c989-53f67d69917f"},"outputs":[{"output_type":"stream","name":"stdout","text":["b is modified: [99  1  2  3  4  5  6  7]\n","b unchanged with copy: [99  1  2  3  4  5  6  7]\n"]}],"source":["b = np.arange(8)\n","B = b.reshape(2,4)\n","B[0,0] = 99\n","print('b is modified:', b)\n","C = b.reshape(2,4).copy()\n","C[0,0] = -1\n","print('b unchanged with copy:', b)\n"]},{"cell_type":"code","execution_count":11,"id":"a3e599bd","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"a3e599bd","executionInfo":{"status":"ok","timestamp":1754675974987,"user_tz":-330,"elapsed":20,"user":{"displayName":"joshith sai panchumarthi | AP23110010163","userId":"11800902132864092383"}},"outputId":"f2bae6cc-77f3-496e-ff16-c146ad750733"},"outputs":[{"output_type":"stream","name":"stdout","text":["Original array after ravel change:\n"," [[[999   1   2   3]\n","  [  4   5   6   7]\n","  [  8   9  10  11]]\n","\n"," [[ 12  13  14  15]\n","  [ 16  17  18  19]\n","  [ 20  21  22  23]]]\n","Flatten result:\n"," [  0 888   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n","  18  19  20  21  22  23]\n"]}],"source":["# üñäÔ∏è TODO: Flatten a 3‚ÄëD array into 1‚ÄëD using both `ravel` and `flatten`; observe copy vs view.\n","import numpy as np\n","\n","arr = np.arange(24).reshape(2, 3, 4)\n","\n","r = arr.ravel()\n","f = arr.flatten()\n","\n","r[0] = 999\n","f[1] = 888\n","\n","print(\"Original array after ravel change:\\n\", arr)\n","print(\"Flatten result:\\n\", f)\n"]},{"cell_type":"markdown","id":"2390c4ae","metadata":{"id":"2390c4ae"},"source":["## <a name='join'></a>6Ô∏è‚É£ Joining, Splitting, Set & Sorting Ops"]},{"cell_type":"code","execution_count":12,"id":"a53f640a","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"a53f640a","executionInfo":{"status":"ok","timestamp":1754675987640,"user_tz":-330,"elapsed":40,"user":{"displayName":"joshith sai panchumarthi | AP23110010163","userId":"11800902132864092383"}},"outputId":"b8cc5eb0-b6c2-44d0-a65d-26a075bbb18c"},"outputs":[{"output_type":"stream","name":"stdout","text":["union [1 2 3 4 5 6]\n","intersect [1 2]\n","sorted descending [6 5 4 3 2 1]\n"]}],"source":["x = np.array([1,3,5]); y = np.array([2,4,6])\n","xy = np.concatenate([x,y])\n","print('union', np.union1d(x,y))\n","print('intersect', np.intersect1d(xy,[1,2,10]))\n","print('sorted descending', np.sort(xy)[::-1])\n"]},{"cell_type":"code","execution_count":13,"id":"4231e729","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4231e729","executionInfo":{"status":"ok","timestamp":1754676001106,"user_tz":-330,"elapsed":48,"user":{"displayName":"joshith sai panchumarthi | AP23110010163","userId":"11800902132864092383"}},"outputId":"0f1393e3-acbd-483e-9f8b-a730eb98a66a"},"outputs":[{"output_type":"stream","name":"stdout","text":["[0 1 2 3 4]\n","[5 6 7 8 9]\n"]}],"source":["# üñäÔ∏è TODO: split `xy` back into two equal halves using `np.array_split`\n","import numpy as np\n","\n","xy = np.arange(10)\n","x, y = np.array_split(xy, 2)\n","print(x)\n","print(y)\n"]},{"cell_type":"markdown","id":"e6ebeb68","metadata":{"id":"e6ebeb68"},"source":["## <a name='arithmetic'></a>7Ô∏è‚É£ Arithmetic Ops & Universal Functions"]},{"cell_type":"code","execution_count":14,"id":"04a6eda9","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"04a6eda9","executionInfo":{"status":"ok","timestamp":1754676004732,"user_tz":-330,"elapsed":17,"user":{"displayName":"joshith sai panchumarthi | AP23110010163","userId":"11800902132864092383"}},"outputId":"78ad692e-c944-4345-968a-e030a33daa71"},"outputs":[{"output_type":"stream","name":"stdout","text":["exp [ 1.          2.71828183  7.3890561  20.08553692 54.59815003]\n","sin [ 0.          0.84147098  0.90929743  0.14112001 -0.7568025 ]\n","vectorised addition [10 11 12 13 14]\n"]}],"source":["v = np.arange(5)\n","print('exp', np.exp(v))\n","print('sin', np.sin(v))\n","print('vectorised addition', v + 10)\n"]},{"cell_type":"code","execution_count":15,"id":"c011f422","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"c011f422","executionInfo":{"status":"ok","timestamp":1754676018493,"user_tz":-330,"elapsed":74,"user":{"displayName":"joshith sai panchumarthi | AP23110010163","userId":"11800902132864092383"}},"outputId":"74c767ba-36fa-4148-fb26-d6a16a13c79a"},"outputs":[{"output_type":"stream","name":"stdout","text":["Radians: [0.         0.52359878 0.78539816 1.04719755 1.57079633]\n","Sin values: [0.         0.5        0.70710678 0.8660254  1.        ]\n"]}],"source":["# üñäÔ∏è TODO: given degrees [0,30,45,60,90], compute radians and sin values.\n","import numpy as np\n","\n","deg = np.array([0, 30, 45, 60, 90])\n","rad = np.deg2rad(deg)\n","sin_vals = np.sin(rad)\n","\n","print(\"Radians:\", rad)\n","print(\"Sin values:\", sin_vals)\n"]},{"cell_type":"markdown","id":"7c9a5d70","metadata":{"id":"7c9a5d70"},"source":["## <a name='broadcast'></a>8Ô∏è‚É£ Broadcasting Rules"]},{"cell_type":"markdown","id":"aba2764d","metadata":{"id":"aba2764d"},"source":["Rules: compare dimensions from right ‚Üí left; stretch size 1 dims; mismatch error."]},{"cell_type":"code","execution_count":16,"id":"6313899c","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6313899c","executionInfo":{"status":"ok","timestamp":1754676031167,"user_tz":-330,"elapsed":26,"user":{"displayName":"joshith sai panchumarthi | AP23110010163","userId":"11800902132864092383"}},"outputId":"01985bce-37e8-4d7e-b63f-ebd4eb43067f"},"outputs":[{"output_type":"stream","name":"stdout","text":["[[0 1 2 3 4]\n"," [1 2 3 4 5]\n"," [2 3 4 5 6]]\n"]}],"source":["row = np.arange(5)\n","col = np.arange(3).reshape(3,1)\n","matrix = row + col  # broadcast to 3√ó5\n","print(matrix)\n"]},{"cell_type":"code","execution_count":17,"id":"de718119","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"de718119","executionInfo":{"status":"ok","timestamp":1754676043377,"user_tz":-330,"elapsed":16,"user":{"displayName":"joshith sai panchumarthi | AP23110010163","userId":"11800902132864092383"}},"outputId":"87d1ec7a-2f51-4a34-dc31-41020f943fcb"},"outputs":[{"output_type":"stream","name":"stdout","text":["[[  1   2   3   4   5   6   7   8   9  10]\n"," [  2   4   6   8  10  12  14  16  18  20]\n"," [  3   6   9  12  15  18  21  24  27  30]\n"," [  4   8  12  16  20  24  28  32  36  40]\n"," [  5  10  15  20  25  30  35  40  45  50]\n"," [  6  12  18  24  30  36  42  48  54  60]\n"," [  7  14  21  28  35  42  49  56  63  70]\n"," [  8  16  24  32  40  48  56  64  72  80]\n"," [  9  18  27  36  45  54  63  72  81  90]\n"," [ 10  20  30  40  50  60  70  80  90 100]]\n"]}],"source":["# üñäÔ∏è TODO: use broadcasting to create a 10√ó10 multiplication table.\n","import numpy as np\n","\n","x = np.arange(1, 11).reshape(-1, 1)\n","y = np.arange(1, 11)\n","table = x * y\n","\n","print(table)\n"]},{"cell_type":"markdown","id":"38a618c8","metadata":{"id":"38a618c8"},"source":["## <a name='stats'></a>9Ô∏è‚É£ Statistics & Aggregations"]},{"cell_type":"code","execution_count":18,"id":"af9ac70d","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"af9ac70d","executionInfo":{"status":"ok","timestamp":1754676047980,"user_tz":-330,"elapsed":53,"user":{"displayName":"joshith sai panchumarthi | AP23110010163","userId":"11800902132864092383"}},"outputId":"154a44e5-e8ac-4a66-862a-d9b9a17b791d"},"outputs":[{"output_type":"stream","name":"stdout","text":["data\n"," [[85 64 51 27]\n"," [31  5  8  2]\n"," [18 81 65 91]\n"," [50 61 97 73]\n"," [63 54 56 93]]\n","row sums [227  46 255 281 266]\n","col means [49.4 53.  55.4 57.2]\n"]}],"source":["data = np.random.default_rng(0).integers(1, 100, size=(5,4))\n","print('data\\n', data)\n","print('row sums', data.sum(axis=1))\n","print('col means', data.mean(axis=0))\n"]},{"cell_type":"code","execution_count":19,"id":"63adf5be","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"63adf5be","executionInfo":{"status":"ok","timestamp":1754676065276,"user_tz":-330,"elapsed":28,"user":{"displayName":"joshith sai panchumarthi | AP23110010163","userId":"11800902132864092383"}},"outputId":"61cb1e13-d343-431d-9f01-cb636ae3dd74"},"outputs":[{"output_type":"stream","name":"stdout","text":["[ 5.75 10.5  15.25]\n"]}],"source":["# üñäÔ∏è TODO: compute `np.percentile` (25th, 50th, 75th) of flattened `data`.\n","import numpy as np\n","\n","data = np.arange(1, 21).reshape(4, 5)\n","p = np.percentile(data, [25, 50, 75])\n","\n","print(p)\n"]},{"cell_type":"markdown","id":"8f3c00d7","metadata":{"id":"8f3c00d7"},"source":["## <a name='random'></a>üîü Random Numbers & Reproducibility"]},{"cell_type":"code","execution_count":20,"id":"98016975","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"98016975","executionInfo":{"status":"ok","timestamp":1754676093392,"user_tz":-330,"elapsed":42,"user":{"displayName":"joshith sai panchumarthi | AP23110010163","userId":"11800902132864092383"}},"outputId":"56ee80f1-f774-4266-cde0-67eb0d78b406"},"outputs":[{"output_type":"stream","name":"stdout","text":["[0.77395605 0.43887844 0.85859792 0.69736803 0.09417735] [31 49 39 40 38]\n"]}],"source":["rng = np.random.default_rng(42)\n","rand_floats = rng.random(5)\n","rand_ints = rng.integers(low=10, high=50, size=5)\n","print(rand_floats, rand_ints)\n","rng2 = np.random.default_rng(42)\n","assert np.allclose(rand_floats, rng2.random(5))\n"]},{"cell_type":"code","execution_count":21,"id":"35dbadba","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"35dbadba","executionInfo":{"status":"ok","timestamp":1754676134415,"user_tz":-330,"elapsed":24,"user":{"displayName":"joshith sai panchumarthi | AP23110010163","userId":"11800902132864092383"}},"outputId":"459161b4-9820-4437-87f7-a3bbc83abe86"},"outputs":[{"output_type":"stream","name":"stdout","text":["0.16\n"]}],"source":["# üñäÔ∏è TODO: simulate rolling a fair six‚Äësided die 100 times; estimate proportion of 6s.\n","import numpy as np\n","\n","rolls = np.random.randint(1, 7, size=100)\n","prop_6 = np.mean(rolls == 6)\n","\n","print(prop_6)\n"]},{"cell_type":"markdown","id":"6cdb04b2","metadata":{"id":"6cdb04b2"},"source":["## <a name='structured'></a>1Ô∏è‚É£1Ô∏è‚É£ Structured / Record Arrays"]},{"cell_type":"code","execution_count":22,"id":"d8f64e42","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"d8f64e42","executionInfo":{"status":"ok","timestamp":1754676139304,"user_tz":-330,"elapsed":27,"user":{"displayName":"joshith sai panchumarthi | AP23110010163","userId":"11800902132864092383"}},"outputId":"98d9afe1-ad68-40b8-969e-10d91458a10c"},"outputs":[{"output_type":"stream","name":"stdout","text":["['Alice' 'Bob'] 27.5\n"]}],"source":["people = np.array([('Alice', 25, 55.0), ('Bob', 30, 85.5)],\n","                   dtype=[('name','U10'), ('age','i4'), ('weight','f4')])\n","print(people['name'], people['age'].mean())\n"]},{"cell_type":"code","execution_count":23,"id":"7a65fe1d","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7a65fe1d","executionInfo":{"status":"ok","timestamp":1754676166128,"user_tz":-330,"elapsed":19,"user":{"displayName":"joshith sai panchumarthi | AP23110010163","userId":"11800902132864092383"}},"outputId":"5b8c7f12-d0df-4ab3-8598-7a5d7842e2cb"},"outputs":[{"output_type":"stream","name":"stdout","text":["[(1, 'Alice', 5.5) (2, 'Bob', 6. )]\n"]}],"source":["# üñäÔ∏è TODO: add a new field 'height' to the structured array using `np.lib.recfunctions.append_fields` (hint: pip install?).\n","import numpy as np\n","from numpy.lib import recfunctions as rfn\n","\n","data = np.array([(1, 'Alice'), (2, 'Bob')], dtype=[('id', 'i4'), ('name', 'U10')])\n","heights = np.array([5.5, 6.0])\n","\n","new_data = rfn.append_fields(data, 'height', heights, dtypes='f8', usemask=False)\n","\n","print(new_data)\n"]},{"cell_type":"markdown","id":"df5b617b","metadata":{"id":"df5b617b"},"source":["## <a name='linalg'></a>1Ô∏è‚É£2Ô∏è‚É£ Linear Algebra Essentials"]},{"cell_type":"code","execution_count":24,"id":"3f7fb475","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3f7fb475","executionInfo":{"status":"ok","timestamp":1754676170686,"user_tz":-330,"elapsed":45,"user":{"displayName":"joshith sai panchumarthi | AP23110010163","userId":"11800902132864092383"}},"outputId":"347aee06-bb4c-43b0-910c-cee38e7c7b06"},"outputs":[{"output_type":"stream","name":"stdout","text":["A¬∑x ‚âà b? True\n"]}],"source":["A = np.random.random((3,3))\n","b = np.random.random(3)\n","x = np.linalg.solve(A, b)\n","print('A¬∑x ‚âà b?', np.allclose(A.dot(x), b))\n"]},{"cell_type":"code","execution_count":25,"id":"a8fb02d7","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"a8fb02d7","executionInfo":{"status":"ok","timestamp":1754676182678,"user_tz":-330,"elapsed":18,"user":{"displayName":"joshith sai panchumarthi | AP23110010163","userId":"11800902132864092383"}},"outputId":"b321bae4-631e-4d28-bd69-dc4013ba0cb4"},"outputs":[{"output_type":"stream","name":"stdout","text":["Eigenvalues: [5. 2.]\n"]}],"source":["# üñäÔ∏è TODO: compute eigenvalues of `A` using `np.linalg.eig`.\n","import numpy as np\n","\n","A = np.array([[4, 2],\n","              [1, 3]])\n","\n","vals, vecs = np.linalg.eig(A)\n","\n","print(\"Eigenvalues:\", vals)\n"]},{"cell_type":"markdown","id":"e8fd753c","metadata":{"id":"e8fd753c"},"source":["## <a name='io'></a>1Ô∏è‚É£3Ô∏è‚É£ File‚ÄØI/O (`npy`, `npz`, `txt`)"]},{"cell_type":"code","execution_count":26,"id":"bd6dc026","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bd6dc026","executionInfo":{"status":"ok","timestamp":1754676186265,"user_tz":-330,"elapsed":28,"user":{"displayName":"joshith sai panchumarthi | AP23110010163","userId":"11800902132864092383"}},"outputId":"419d758b-ea4f-4715-934e-8addf431b894"},"outputs":[{"output_type":"stream","name":"stdout","text":["loaded equals A? True\n"]}],"source":["np.save('array.npy', A)\n","loaded = np.load('array.npy')\n","print('loaded equals A?', np.allclose(loaded, A))\n","np.savez('multi_arrays.npz', A=A, b=b)\n"]},{"cell_type":"code","execution_count":27,"id":"d9552893","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"d9552893","executionInfo":{"status":"ok","timestamp":1754676206756,"user_tz":-330,"elapsed":21,"user":{"displayName":"joshith sai panchumarthi | AP23110010163","userId":"11800902132864092383"}},"outputId":"1ab4ff46-3dea-4baa-e948-694fb6ae8cd0"},"outputs":[{"output_type":"stream","name":"stdout","text":["[[0.44048417 0.28455229 0.81468027]\n"," [0.96280919 0.05017687 0.261482  ]\n"," [0.10729907 0.34013817 0.07858485]\n"," [0.36229538 0.72385531 0.40648952]\n"," [0.2237425  0.64079553 0.56221794]]\n"]}],"source":["# üñäÔ∏è TODO: Use `np.savetxt` to write `data` (from stats section) to CSV then reload with `np.loadtxt`.\n","import numpy as np\n","\n","data = np.random.rand(5, 3)\n","\n","np.savetxt(\"data.csv\", data, delimiter=\",\")\n","loaded = np.loadtxt(\"data.csv\", delimiter=\",\")\n","\n","print(loaded)\n"]},{"cell_type":"markdown","id":"f24f33e3","metadata":{"id":"f24f33e3"},"source":["## <a name='datetime'></a>1Ô∏è‚É£4Ô∏è‚É£ Datetime64 & Timedelta64"]},{"cell_type":"code","execution_count":28,"id":"3ce7b543","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3ce7b543","executionInfo":{"status":"ok","timestamp":1754676213530,"user_tz":-330,"elapsed":26,"user":{"displayName":"joshith sai panchumarthi | AP23110010163","userId":"11800902132864092383"}},"outputId":"db0aa442-46e3-42fe-f177-c72b29edfab3"},"outputs":[{"output_type":"stream","name":"stdout","text":["['2023-01-01' '2023-01-02' '2023-01-03' '2023-01-04' '2023-01-05'] 1 days\n"]}],"source":["dates = np.arange('2023-01', '2023-04', dtype='datetime64[D]')\n","delta = dates[1:] - dates[:-1]\n","print(dates[:5], delta[0])\n"]},{"cell_type":"code","execution_count":31,"id":"e493d6f8","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"e493d6f8","executionInfo":{"status":"ok","timestamp":1754676284466,"user_tz":-330,"elapsed":18,"user":{"displayName":"joshith sai panchumarthi | AP23110010163","userId":"11800902132864092383"}},"outputId":"cbb0e9a3-b7ef-44a1-d008-8e26f13e8c03"},"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 1.  2.  9.  4.]\n"," [ 5.  6.  7.  8.]\n"," [ 3. 10. 11. 12.]]\n"]}],"source":["# üñäÔ∏è TODO: find how many Mondays appear in `dates` array.\n","import numpy as np\n","\n","data = np.array([[1, 2, np.nan, 4],\n","                 [5, np.nan, 7, 8],\n","                 [np.nan, 10, 11, 12]])\n","\n","col_means = np.nanmean(data, axis=0)\n","\n","nan_indices = np.isnan(data)\n","\n","data[nan_indices] = np.take(col_means, np.where(nan_indices)[1])\n","\n","print(data)"]},{"cell_type":"markdown","id":"636116b9","metadata":{"id":"636116b9"},"source":["## <a name='mask'></a>1Ô∏è‚É£5Ô∏è‚É£ Masked Arrays & NaNs"]},{"cell_type":"code","execution_count":32,"id":"ec30b3ee","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ec30b3ee","executionInfo":{"status":"ok","timestamp":1754676291139,"user_tz":-330,"elapsed":100,"user":{"displayName":"joshith sai panchumarthi | AP23110010163","userId":"11800902132864092383"}},"outputId":"bd9e9de0-6b2c-4b99-f546-ecf531ad4dbb"},"outputs":[{"output_type":"stream","name":"stdout","text":["2.3333333333333335\n"]}],"source":["arr = np.array([1, 2, np.nan, 4, np.nan])\n","masked = np.ma.masked_invalid(arr)\n","print(masked.mean())\n"]},{"cell_type":"code","execution_count":33,"id":"1ead3a9c","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1ead3a9c","executionInfo":{"status":"ok","timestamp":1754676310135,"user_tz":-330,"elapsed":17,"user":{"displayName":"joshith sai panchumarthi | AP23110010163","userId":"11800902132864092383"}},"outputId":"ffa22248-900f-47a8-ccda-4afb9b44380f"},"outputs":[{"output_type":"stream","name":"stdout","text":["[[1.  6.5 3. ]\n"," [4.  5.  6. ]\n"," [7.  8.  9. ]]\n"]}],"source":["# üñäÔ∏è TODO: replace NaNs with column means in a 2‚ÄëD array containing NaNs.\n","import numpy as np\n","\n","a = np.array([[1, np.nan, 3],\n","              [4, 5, np.nan],\n","              [7, 8, 9]], dtype=float)\n","\n","col_means = np.nanmean(a, axis=0)\n","inds = np.where(np.isnan(a))\n","a[inds] = np.take(col_means, inds[1])\n","\n","print(a)\n"]},{"cell_type":"markdown","id":"509e6104","metadata":{"id":"509e6104"},"source":["## <a name='project'></a>1Ô∏è‚É£6Ô∏è‚É£ Mini‚ÄëProject: Fitness Data Analysis"]},{"cell_type":"markdown","id":"d867d3a6","metadata":{"id":"d867d3a6"},"source":["Load `fitness.txt` (tab‚Äëseparated) then follow prompts."]},{"cell_type":"code","execution_count":39,"id":"593e50db","metadata":{"id":"593e50db","executionInfo":{"status":"ok","timestamp":1754676584622,"user_tz":-330,"elapsed":18,"user":{"displayName":"joshith sai panchumarthi | AP23110010163","userId":"11800902132864092383"}}},"outputs":[],"source":["# Load the data from the fitness.txt file\n","fitness = np.genfromtxt('/content/sample_data/fitness.txt', delimiter='\\t', skip_header=1, dtype=None, encoding='utf-8')"]},{"cell_type":"code","execution_count":40,"id":"32e514d2","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"32e514d2","executionInfo":{"status":"ok","timestamp":1754676683642,"user_tz":-330,"elapsed":184,"user":{"displayName":"joshith sai panchumarthi | AP23110010163","userId":"11800902132864092383"}},"outputId":"d0678a26-8a0b-48b2-ab09-92b32a64b7bd"},"outputs":[{"output_type":"stream","name":"stdout","text":["Monthly step count:\n"," date\n","1      10163\n","10     79051\n","11    103071\n","12     89565\n","Name: step_count, dtype: int64\n","\n","Sleep vs mood correlation: 0.2104166644730015\n","\n","Weekly summary:\n","        step_count  hours_of_sleep        mood\n","week                                         \n","1      833.285714        3.714286  171.428571\n","2     2165.000000        5.000000  250.000000\n","40    3843.333333        6.000000  133.333333\n","41    3401.428571        5.571429  114.285714\n","42    2952.714286        6.428571  128.571429\n","43    2326.142857        5.571429  214.285714\n","44    2942.571429        5.142857  285.714286\n","45    4459.571429        4.714286  285.714286\n","46    2530.571429        5.571429  285.714286\n","47    3979.857143        5.714286  300.000000\n","48    2671.571429        6.428571  257.142857\n","49    3025.428571        5.428571  214.285714\n","50    3232.571429        4.285714  185.714286\n","51    2954.571429        4.857143  142.857143\n","52    2688.285714        4.142857  185.714286\n"]}],"source":["# üñäÔ∏è TODO: Monthly step count, sleep vs mood correlation, weekly summary, etc.\n","import numpy as np\n","import pandas as pd\n","\n","f = np.genfromtxt('fitness.txt', delimiter='\\t', dtype=None, encoding=None, names=True)\n","df = pd.DataFrame(f)\n","df['date'] = pd.to_datetime(df['date'], format='%d-%m-%Y')\n","\n","print(\"Monthly step count:\\n\", df.groupby(df['date'].dt.month)['step_count'].sum())\n","print(\"\\nSleep vs mood correlation:\", df['hours_of_sleep'].corr(df['mood']))\n","print(\"\\nWeekly summary:\\n\", df.groupby(df['date'].dt.isocalendar().week)[['step_count','hours_of_sleep','mood']].mean())\n"]},{"cell_type":"markdown","id":"e7c0e1dc","metadata":{"id":"e7c0e1dc"},"source":["## <a name='conclusion'></a>1Ô∏è‚É£7Ô∏è‚É£ Conclusion & Further Practice\n","Congrats on covering **all core NumPy topics** from your five lecture notebooks!\n","\n","*Keep experimenting, read the official docs, and try converting your NumPy pipelines into Pandas or JAX for more fun.*"]}],"metadata":{"colab":{"provenance":[]},"language_info":{"name":"python"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"nbformat":4,"nbformat_minor":5}